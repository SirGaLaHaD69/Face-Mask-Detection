# -*- coding: utf-8 -*-
"""covidMask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tkwtodQneBBrDq7LjEPfcTd7agvftRqI
"""
#
# !unzip 'train'
#
# !unzip 'test'
#
# !unzip 'val'

"""### *Importing Libraries*"""

import numpy as np
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from keras.layers import *
from keras.models import Sequential
from keras.optimizers import Adam

"""### *Preparing the DataGenerators*"""

# train_gen = ImageDataGenerator(
#             rescale=1/255.0,
#             rotation_range = 30,
#             width_shift_range = 0.3,
#             height_shift_range = 0.2,
#             shear_range = 0.2 ,
#             zoom_range = 0.3,
#             horizontal_flip = True,
# )
# val_gen = ImageDataGenerator(
#         rescale=1/255.0
# )
# test_gen = ImageDataGenerator(
#         rescale=1/255.0
# )
#
# train_set = train_gen.flow_from_directory(
#             'train',
#             target_size = (150,150),
#             batch_size = 64,
#             class_mode='binary',
#
# )
# val_set =val_gen.flow_from_directory(
#             'val',
#             target_size =(150,150),
#             batch_size = 64,
#             class_mode='binary',
#
# )
# test_set =test_gen.flow_from_directory(
#             'test',
#             target_size =(150,150),
#             batch_size = 64,
#             class_mode='binary',
#
# )

"""### **Building CNN Model**"""

num_features=64
model = Sequential()

model.add(Conv2D(num_features, kernel_size=(5, 5), activation='relu', input_shape=(150, 150, 3)))
model.add(BatchNormalization())
model.add(Conv2D(num_features, kernel_size=(5,5), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Dropout(0.4))

model.add(Conv2D(2*num_features, kernel_size=(5,5), activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(2*num_features, kernel_size=(5,5), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Dropout(0.4))

model.add(Conv2D(2*2*num_features, kernel_size=(3,3), activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(2*2*num_features, kernel_size=(3,3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Dropout(0.4))

model.add(Flatten())

model.add(Dense(num_features, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(1, activation='sigmoid'))
model.summary()



adam = Adam(learning_rate=1e-4)

model.compile(loss='binary_crossentropy',optimizer=adam,metrics=['accuracy'])
#
# from keras.callbacks.callbacks import ModelCheckpoint
# chk = ModelCheckpoint('covid_weights.h5',verbose=True,save_best_only=True,monitor='val_accuracy',mode='auto')
#
# hist = model.fit_generator(
#     train_set,
#     epochs=10,
#     validation_data=val_set,
#     callbacks=[chk]
# )
#
# acc = hist.history['accuracy']
# val_acc = hist.history['val_accuracy']
# loss = hist.history['loss']
# val_loss = hist.history['val_loss']
#

#
# plt.plot(acc,label='accuracy')
# plt.plot(val_acc,label='val_acc')
# plt.plot(loss,label='loss')
# plt.legend()
# plt.show()

model.load_weights('covid_weights.h5')
#
# test_image = image.load_img('/content/test/without_mask/89.jpg', target_size=(150,150))
# test_image= image.img_to_array(test_image)
# test_image= np.expand_dims(test_image,axis=0)
# test_image=test_image/255.0
# preds = model.predict_classes(test_image)
# preds[0][0]==1
#
# from sklearn.metrics import confusion_matrix
# loss, acc = model.evaluate(test_set)
# pred = model.predict_generator(test_set)
# pred = pred >0.5
# y_true = test_set.classes
# confusion_matrix(y_true,pred)
# loss,acc
#
# x,y=test_set.next()
# plt.imshow(x[2])
#
# print(model.predict(x[2].reshape((1,150,150,3))))
# print(y[2])
